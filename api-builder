#!/usr/bin/env python

#############################################################################
# Author  : Jerome ODIER, Christophe SMEKENS, Francois SMEKENS
# Email   : ---@gmail.com, ---@gmail.com, ---@gmail.com
#
# Version : 1.0 beta (2012)
#
#
# This file is part of API-BUILDER.
#
#  u-autotool is free software; you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published
#  by the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  u-autotool is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################

import os, sys, xml.dom.minidom

#############################################################################

if sys.version_info < (3,): range = xrange

#############################################################################
# GLOBAL VARIABLES							    #
#############################################################################

ASSET = {}
EXTENSIONS = []
TYPES = {}
PROFILES = {}
CONSTRAINTS = {}

#############################################################################

EXTRAS = {}
INITS = {}

#############################################################################

def getTEXTs(self):
	L = []

	for textensionNode in self.childNodes:
		if textensionNode.nodeType == xml.dom.Node.     TEXT_NODE    :
			L.append(textensionNode.nodeValue)

	return L

xml.dom.minidom.Element.getTEXTs = getTEXTs

#############################################################################

def getCDATAs(self):
	L = []

	for textensionNode in self.childNodes:
		if textensionNode.nodeType == xml.dom.Node.CDATA_SECTION_NODE:
			L.append(textensionNode.nodeValue)

	return L

xml.dom.minidom.Element.getCDATAs = getCDATAs

#############################################################################

def myprint(s, level):

	for i in xrange(level):
		sys.stdout.write(' ')

	print(s)

#############################################################################

def displayTree(T, level = 0):

		if   type(T).__name__ == 'list':

			for item in enumerate(T):

				myprint('idx: %d' % item[0], level)

				displayTree(item[1], level + 4)

		elif type(T).__name__ == 'dict':

			for item in T.iteritems():

				myprint('key: %s' % item[0], level)

				displayTree(item[1], level + 4)

		else:
			myprint(T, level)

#############################################################################
# PARSERS								    #
#############################################################################

def parseInterfaceNodes(interfaces):
	#####################################################################

	if len(interfaces) != 1:
		print('[Error] Only one interface allowed !')

		sys.exit(1)

	interface = interfaces[0]

	#####################################################################

	date = ''
	authors = ''
	description = ''

	#####################################################################

	for node in interface.childNodes:

		#############################################################

		if node.nodeName == 'asset':

			for assetNode in node.childNodes:

				if assetNode.nodeName == 'date':
					date = assetNode.getTEXTs()[0]
				if assetNode.nodeName == 'authors':
					authors = assetNode.getTEXTs()[0]
				if assetNode.nodeName == 'description':
					description = assetNode.getTEXTs()[0]

		#############################################################

		if node.nodeName == 'extensions':

			for extensionNode in node.childNodes:

				#############################################

				if extensionNode.nodeName == 'extension':

					METHODS = []

					for methodNode in extensionNode.childNodes:

						#############################

						if methodNode.nodeName == 'method':

							PARAMS = []

							for paramNode in methodNode.childNodes:

								#############

								if paramNode.nodeName == 'param':

									dic = {
										'name': paramNode.getAttribute('name'),
										'type': paramNode.getAttribute('type'),
									}

									PARAMS.append(dic)

							dic = {
								'name': methodNode.getAttribute('name'),
								'type': methodNode.getAttribute('type'),
								'params': PARAMS
							}

							METHODS.append(dic)

					dic = {
						'name': extensionNode.getAttribute('name'),
					#	'type': extensionNode.getAttribute('type'),
						'methods': METHODS
					}

					EXTENSIONS.append(dic)

		#############################################################

		if node.nodeName == 'types':

			TYPE = {}
			ENUM = {}
			STRUCT = {}

			for typeNode in node.childNodes:

				#############################################

				if typeNode.nodeName == 'type':

					dic = {
						'from': typeNode.getAttribute('from')
					}

					TYPE[typeNode.getAttribute('name')] = dic

				#############################################

				if typeNode.nodeName == 'enum':

					VALUES = []

					for valueNode in typeNode.childNodes:

						#############################

						if valueNode.nodeName == 'value':

							dic = {
								'name': valueNode.getAttribute('name')
							}

							VALUES.append(dic)

					dic = {
						'values': VALUES
					}

					ENUM[typeNode.getAttribute('name')] = dic


				#############################################

				if typeNode.nodeName == 'struct':

					FIELDS = []

					for fieldNode in typeNode.childNodes:

						#############################

						if fieldNode.nodeName == 'field':

							dic = {
								'name': fieldNode.getAttribute('name'),
								'type': fieldNode.getAttribute('type'),
							}

							FIELDS.append(dic)

					dic = {
						'fields': FIELDS
					}

					STRUCT[typeNode.getAttribute('name')] = dic

			#####################################################

			TYPES['type'] = TYPE
			TYPES['enum'] = ENUM
			TYPES['struct'] = STRUCT

		#############################################################

		if node.nodeName == 'profiles':

			for profileNode in node.childNodes:

				#############################################

				if profileNode.nodeName == 'profile':

					dic = {
					}

					PROFILES[profileNode.getAttribute('name')] = dic

		#############################################################

		if node.nodeName == 'constraints':

			for constraintNode in node.childNodes:

				#############################################

				if constraintNode.nodeName == 'constraint':

					KEYS = {}

					for keyNode in constraintNode.childNodes:

						#############################

						if keyNode.nodeName == 'key':

							dic = {
							}

							KEYS[keyNode.getAttribute('name')] = dic

					dic = {
						'keys': KEYS
					}

					CONSTRAINTS[constraintNode.getAttribute('name')] = dic

	#####################################################################

	ASSET['date'] = date
	ASSET['authors'] = authors
	ASSET['description'] = description

	#####################################################################

	print('-----------------------------------------------------------------------------')
	print('| ASSET                                                                     |')
	print('-----------------------------------------------------------------------------')
	displayTree(ASSET)
	print('-----------------------------------------------------------------------------')
	print('| EXTENSIONS                                                                |')
	print('-----------------------------------------------------------------------------')
	displayTree(EXTENSIONS)
	print('-----------------------------------------------------------------------------')
	print('| TYPES                                                                     |')
	print('-----------------------------------------------------------------------------')
	displayTree(TYPES)
	print('-----------------------------------------------------------------------------')
	print('| PROFILES                                                                  |')
	print('-----------------------------------------------------------------------------')
	displayTree(PROFILES)
	print('-----------------------------------------------------------------------------')
	print('| CONSTRAINTS                                                               |')
	print('-----------------------------------------------------------------------------')
	displayTree(CONSTRAINTS)
	print('-----------------------------------------------------------------------------')
	print('')

#############################################################################

def parseImplementationNodes(implementations):
	#####################################################################

	if len(implementations) != 1:
		print('[Error] Only one implementation allowed !')

		sys.exit(1)

	implementation = implementations[0]

	#####################################################################

	for node in implementation.childNodes:

		#############################################################

		if node.nodeName == 'extras':

			PROFILES = {}

			for profileNode in node.childNodes:

				#############################################

				if profileNode.nodeName == 'profile':

					dic = {
						'code': node.getCDATAs()[0]
					}

					PROFILES[profileNode.getAttribute('name')] = dic

			EXTRAS['profiles'] = PROFILES
			EXTRAS['code'] = node.getCDATAs()[0]

		#############################################################

		if node.nodeName == 'inits':

			PROFILES = {}

			for profileNode in node.childNodes:

				#############################################

				if profileNode.nodeName == 'profile':

					dic = {
						'code': node.getCDATAs()[0]
					}

					PROFILES[profileNode.getAttribute('name')] = dic

			INITS['profiles'] = PROFILES
			INITS['code'] = node.getCDATAs()[0]

	#####################################################################

	print('-----------------------------------------------------------------------------')
	print('| EXTRAS                                                                    |')
	print('-----------------------------------------------------------------------------')
	displayTree(EXTRAS)
	print('-----------------------------------------------------------------------------')
	print('| INITS                                                                     |')
	print('-----------------------------------------------------------------------------')
	displayTree(INITS)
	print('-----------------------------------------------------------------------------')
	print('')

#############################################################################
# API-BUILDER								    #
#############################################################################

def apibuilder_load(fileName):
	#####################################################################

	try:
		doc = xml.dom.minidom.parse(fileName)

	except:
		print('[Error] XML error in file `%s` !' % fileName)

		sys.exit(1)

	#####################################################################

	for include in doc.getElementsByTagName('include'):

		for url in buildPaths(include.getAttribute('url')):

			apibuilder_load(url, config)

	#####################################################################

	parseInterfaceNodes(doc.getElementsByTagName('interface'))
	parseImplementationNodes(doc.getElementsByTagName('implementation'))

#############################################################################

def apibuilder_check():
	#####################################################################

	pass

#############################################################################

def apibuilder_emit():
	#####################################################################

	pass

#############################################################################

from optparse import OptionParser

#############################################################################

if __name__ == '__main__':
	#####################################################################

	parser = OptionParser('usage: %prog [options] [filename]')

	parser.add_option('-a', '--authors',
			action='store_true', dest='authors', help='show authors')
	parser.add_option('-v', '--version',
			action='store_true', dest='version', help='show version')

	(options, args) = parser.parse_args()

	#####################################################################

	if options.authors:
		print('Jerome ODIER, Christophe SMEKENS, Francois SMEKENS')
		sys.exit()

	if options.version:
		print('api-builder-1.0')
		sys.exit()

	#####################################################################

	list = [
		'ApiBuilder.xml',
	]

	if   len(args) == 0:
		fileName = os.path.normcase(list[0])
	elif len(args) == 1:
		fileName = os.path.normcase(args[0])
	else:
		parser.error('syntax error')
		sys.exit(1)

	#####################################################################

	if not os.path.exists(fileName):
		parser.error('incorrect filename \'%s\'' % fileName)
		sys.exit(1)

	#####################################################################

	apibuilder_load(fileName)

	apibuilder_check()
	apibuilder_emit()

#############################################################################

